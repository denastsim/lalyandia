// Code generated by protoc-gen-gogo.
// source: messages/external/check_account.proto
// DO NOT EDIT!

/*
	Package external is a generated protocol buffer package.

	It is generated from these files:
		messages/external/check_account.proto

	It has these top-level messages:
		CheckAccount
*/
package external

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/AsynkronIT/protoactor-go/actor"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CheckAccount struct {
	Sender        *actor.PID `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	SessionToken1 string     `protobuf:"bytes,2,opt,name=SessionToken1,proto3" json:"SessionToken1,omitempty"`
	SessionToken2 string     `protobuf:"bytes,3,opt,name=SessionToken2,proto3" json:"SessionToken2,omitempty"`
	Login         string     `protobuf:"bytes,4,opt,name=Login,proto3" json:"Login,omitempty"`
}

func (m *CheckAccount) Reset()                    { *m = CheckAccount{} }
func (*CheckAccount) ProtoMessage()               {}
func (*CheckAccount) Descriptor() ([]byte, []int) { return fileDescriptorCheckAccount, []int{0} }

func (m *CheckAccount) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *CheckAccount) GetSessionToken1() string {
	if m != nil {
		return m.SessionToken1
	}
	return ""
}

func (m *CheckAccount) GetSessionToken2() string {
	if m != nil {
		return m.SessionToken2
	}
	return ""
}

func (m *CheckAccount) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckAccount)(nil), "external.CheckAccount")
}
func (this *CheckAccount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckAccount)
	if !ok {
		that2, ok := that.(CheckAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.SessionToken1 != that1.SessionToken1 {
		return false
	}
	if this.SessionToken2 != that1.SessionToken2 {
		return false
	}
	if this.Login != that1.Login {
		return false
	}
	return true
}
func (this *CheckAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&external.CheckAccount{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "SessionToken1: "+fmt.Sprintf("%#v", this.SessionToken1)+",\n")
	s = append(s, "SessionToken2: "+fmt.Sprintf("%#v", this.SessionToken2)+",\n")
	s = append(s, "Login: "+fmt.Sprintf("%#v", this.Login)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCheckAccount(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CheckAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckAccount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckAccount(dAtA, i, uint64(m.Sender.Size()))
		n1, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.SessionToken1) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckAccount(dAtA, i, uint64(len(m.SessionToken1)))
		i += copy(dAtA[i:], m.SessionToken1)
	}
	if len(m.SessionToken2) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckAccount(dAtA, i, uint64(len(m.SessionToken2)))
		i += copy(dAtA[i:], m.SessionToken2)
	}
	if len(m.Login) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCheckAccount(dAtA, i, uint64(len(m.Login)))
		i += copy(dAtA[i:], m.Login)
	}
	return i, nil
}

func encodeFixed64CheckAccount(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CheckAccount(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCheckAccount(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckAccount) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovCheckAccount(uint64(l))
	}
	l = len(m.SessionToken1)
	if l > 0 {
		n += 1 + l + sovCheckAccount(uint64(l))
	}
	l = len(m.SessionToken2)
	if l > 0 {
		n += 1 + l + sovCheckAccount(uint64(l))
	}
	l = len(m.Login)
	if l > 0 {
		n += 1 + l + sovCheckAccount(uint64(l))
	}
	return n
}

func sovCheckAccount(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheckAccount(x uint64) (n int) {
	return sovCheckAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CheckAccount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckAccount{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`SessionToken1:` + fmt.Sprintf("%v", this.SessionToken1) + `,`,
		`SessionToken2:` + fmt.Sprintf("%v", this.SessionToken2) + `,`,
		`Login:` + fmt.Sprintf("%v", this.Login) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCheckAccount(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CheckAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckAccount
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionToken1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionToken1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionToken2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionToken2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Login = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCheckAccount
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheckAccount
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheckAccount(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheckAccount = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckAccount   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("messages/external/check_account.proto", fileDescriptorCheckAccount) }

var fileDescriptorCheckAccount = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x4f, 0xad, 0x28, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x4f, 0xce,
	0x48, 0x4d, 0xce, 0x8e, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x80, 0xc9, 0x4a, 0x99, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7,
	0xe7, 0xea, 0x3b, 0x16, 0x57, 0xe6, 0x65, 0x17, 0xe5, 0xe7, 0x79, 0x86, 0xe8, 0x83, 0x95, 0x25,
	0x26, 0x97, 0xe4, 0x17, 0xe9, 0xa6, 0xe7, 0xeb, 0x83, 0x19, 0x10, 0xb1, 0x62, 0x88, 0x09, 0x4a,
	0x53, 0x18, 0xb9, 0x78, 0x9c, 0x41, 0x26, 0x3b, 0x42, 0x0c, 0x16, 0x52, 0xe2, 0x62, 0x0b, 0x4e,
	0xcd, 0x4b, 0x49, 0x2d, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0xe2, 0xd2, 0x03, 0xeb, 0xd2,
	0x0b, 0xf0, 0x74, 0x09, 0x82, 0xca, 0x08, 0xa9, 0x70, 0xf1, 0x06, 0xa7, 0x16, 0x17, 0x67, 0xe6,
	0xe7, 0x85, 0xe4, 0x67, 0xa7, 0xe6, 0x19, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0xa1, 0x0a,
	0xa2, 0xab, 0x32, 0x92, 0x60, 0xc6, 0x54, 0x65, 0x24, 0x24, 0xc2, 0xc5, 0xea, 0x93, 0x9f, 0x9e,
	0x99, 0x27, 0xc1, 0x02, 0x96, 0x85, 0x70, 0x9c, 0x74, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50,
	0x8e, 0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c,
	0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x2f, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4b, 0x3b, 0x3b, 0x72, 0x36, 0x01, 0x00, 0x00,
}
